#version 410 core
in vec4 gl_FragCoord;
 
out vec4 fragColor;
//out float gl_FragDepth;
 
uniform float center_x;
uniform float center_y;
uniform float zoom;
 
#define MAX_ITERATIONS 600

const vec3 colors[256] = vec3[256](
vec3(0.0,0.0,0.0),
vec3(128.0,0.0,0.0),
vec3(0.0,128.0,0.0),
vec3(128.0,128.0,0.0),
vec3(0.0,0.0,128.0),
vec3(128.0,0.0,128.0),
vec3(0.0,128.0,128.0),
vec3(192.0,192.0,192.0),
vec3(128.0,128.0,128.0),
vec3(255.0,0.0,0.0),
vec3(0.0,255.0,0.0),
vec3(255.0,255.0,0.0),
vec3(0.0,0.0,255.0),
vec3(255.0,0.0,255.0),
vec3(0.0,255.0,255.0),
vec3(255.0,255.0,255.0),
vec3(0.0,0.0,0.0),
vec3(0.0,0.0,95.0),
vec3(0.0,0.0,135.0),
vec3(0.0,0.0,175.0),
vec3(0.0,0.0,215.0),
vec3(0.0,0.0,255.0),
vec3(0.0,95.0,0.0),
vec3(0.0,95.0,95.0),
vec3(0.0,95.0,135.0),
vec3(0.0,95.0,175.0),
vec3(0.0,95.0,215.0),
vec3(0.0,95.0,255.0),
vec3(0.0,135.0,0.0),
vec3(0.0,135.0,95.0),
vec3(0.0,135.0,135.0),
vec3(0.0,135.0,175.0),
vec3(0.0,135.0,215.0),
vec3(0.0,135.0,255.0),
vec3(0.0,175.0,0.0),
vec3(0.0,175.0,95.0),
vec3(0.0,175.0,135.0),
vec3(0.0,175.0,175.0),
vec3(0.0,175.0,215.0),
vec3(0.0,175.0,255.0),
vec3(0.0,215.0,0.0),
vec3(0.0,215.0,95.0),
vec3(0.0,215.0,135.0),
vec3(0.0,215.0,175.0),
vec3(0.0,215.0,215.0),
vec3(0.0,215.0,255.0),
vec3(0.0,255.0,0.0),
vec3(0.0,255.0,95.0),
vec3(0.0,255.0,135.0),
vec3(0.0,255.0,175.0),
vec3(0.0,255.0,215.0),
vec3(0.0,255.0,255.0),
vec3(95.0,0.0,0.0),
vec3(95.0,0.0,95.0),
vec3(95.0,0.0,135.0),
vec3(95.0,0.0,175.0),
vec3(95.0,0.0,215.0),
vec3(95.0,0.0,255.0),
vec3(95.0,95.0,0.0),
vec3(95.0,95.0,95.0),
vec3(95.0,95.0,135.0),
vec3(95.0,95.0,175.0),
vec3(95.0,95.0,215.0),
vec3(95.0,95.0,255.0),
vec3(95.0,135.0,0.0),
vec3(95.0,135.0,95.0),
vec3(95.0,135.0,135.0),
vec3(95.0,135.0,175.0),
vec3(95.0,135.0,215.0),
vec3(95.0,135.0,255.0),
vec3(95.0,175.0,0.0),
vec3(95.0,175.0,95.0),
vec3(95.0,175.0,135.0),
vec3(95.0,175.0,175.0),
vec3(95.0,175.0,215.0),
vec3(95.0,175.0,255.0),
vec3(95.0,215.0,0.0),
vec3(95.0,215.0,95.0),
vec3(95.0,215.0,135.0),
vec3(95.0,215.0,175.0),
vec3(95.0,215.0,215.0),
vec3(95.0,215.0,255.0),
vec3(95.0,255.0,0.0),
vec3(95.0,255.0,95.0),
vec3(95.0,255.0,135.0),
vec3(95.0,255.0,175.0),
vec3(95.0,255.0,215.0),
vec3(95.0,255.0,255.0),
vec3(135.0,0.0,0.0),
vec3(135.0,0.0,95.0),
vec3(135.0,0.0,135.0),
vec3(135.0,0.0,175.0),
vec3(135.0,0.0,215.0),
vec3(135.0,0.0,255.0),
vec3(135.0,95.0,0.0),
vec3(135.0,95.0,95.0),
vec3(135.0,95.0,135.0),
vec3(135.0,95.0,175.0),
vec3(135.0,95.0,215.0),
vec3(135.0,95.0,255.0),
vec3(135.0,135.0,0.0),
vec3(135.0,135.0,95.0),
vec3(135.0,135.0,135.0),
vec3(135.0,135.0,175.0),
vec3(135.0,135.0,215.0),
vec3(135.0,135.0,255.0),
vec3(135.0,175.0,0.0),
vec3(135.0,175.0,95.0),
vec3(135.0,175.0,135.0),
vec3(135.0,175.0,175.0),
vec3(135.0,175.0,215.0),
vec3(135.0,175.0,255.0),
vec3(135.0,215.0,0.0),
vec3(135.0,215.0,95.0),
vec3(135.0,215.0,135.0),
vec3(135.0,215.0,175.0),
vec3(135.0,215.0,215.0),
vec3(135.0,215.0,255.0),
vec3(135.0,255.0,0.0),
vec3(135.0,255.0,95.0),
vec3(135.0,255.0,135.0),
vec3(135.0,255.0,175.0),
vec3(135.0,255.0,215.0),
vec3(135.0,255.0,255.0),
vec3(175.0,0.0,0.0),
vec3(175.0,0.0,95.0),
vec3(175.0,0.0,135.0),
vec3(175.0,0.0,175.0),
vec3(175.0,0.0,215.0),
vec3(175.0,0.0,255.0),
vec3(175.0,95.0,0.0),
vec3(175.0,95.0,95.0),
vec3(175.0,95.0,135.0),
vec3(175.0,95.0,175.0),
vec3(175.0,95.0,215.0),
vec3(175.0,95.0,255.0),
vec3(175.0,135.0,0.0),
vec3(175.0,135.0,95.0),
vec3(175.0,135.0,135.0),
vec3(175.0,135.0,175.0),
vec3(175.0,135.0,215.0),
vec3(175.0,135.0,255.0),
vec3(175.0,175.0,0.0),
vec3(175.0,175.0,95.0),
vec3(175.0,175.0,135.0),
vec3(175.0,175.0,175.0),
vec3(175.0,175.0,215.0),
vec3(175.0,175.0,255.0),
vec3(175.0,215.0,0.0),
vec3(175.0,215.0,95.0),
vec3(175.0,215.0,135.0),
vec3(175.0,215.0,175.0),
vec3(175.0,215.0,215.0),
vec3(175.0,215.0,255.0),
vec3(175.0,255.0,0.0),
vec3(175.0,255.0,95.0),
vec3(175.0,255.0,135.0),
vec3(175.0,255.0,175.0),
vec3(175.0,255.0,215.0),
vec3(175.0,255.0,255.0),
vec3(215.0,0.0,0.0),
vec3(215.0,0.0,95.0),
vec3(215.0,0.0,135.0),
vec3(215.0,0.0,175.0),
vec3(215.0,0.0,215.0),
vec3(215.0,0.0,255.0),
vec3(215.0,95.0,0.0),
vec3(215.0,95.0,95.0),
vec3(215.0,95.0,135.0),
vec3(215.0,95.0,175.0),
vec3(215.0,95.0,215.0),
vec3(215.0,95.0,255.0),
vec3(215.0,135.0,0.0),
vec3(215.0,135.0,95.0),
vec3(215.0,135.0,135.0),
vec3(215.0,135.0,175.0),
vec3(215.0,135.0,215.0),
vec3(215.0,135.0,255.0),
vec3(215.0,175.0,0.0),
vec3(215.0,175.0,95.0),
vec3(215.0,175.0,135.0),
vec3(215.0,175.0,175.0),
vec3(215.0,175.0,215.0),
vec3(215.0,175.0,255.0),
vec3(215.0,215.0,0.0),
vec3(215.0,215.0,95.0),
vec3(215.0,215.0,135.0),
vec3(215.0,215.0,175.0),
vec3(215.0,215.0,215.0),
vec3(215.0,215.0,255.0),
vec3(215.0,255.0,0.0),
vec3(215.0,255.0,95.0),
vec3(215.0,255.0,135.0),
vec3(215.0,255.0,175.0),
vec3(215.0,255.0,215.0),
vec3(215.0,255.0,255.0),
vec3(255.0,0.0,0.0),
vec3(255.0,0.0,95.0),
vec3(255.0,0.0,135.0),
vec3(255.0,0.0,175.0),
vec3(255.0,0.0,215.0),
vec3(255.0,0.0,255.0),
vec3(255.0,95.0,0.0),
vec3(255.0,95.0,95.0),
vec3(255.0,95.0,135.0),
vec3(255.0,95.0,175.0),
vec3(255.0,95.0,215.0),
vec3(255.0,95.0,255.0),
vec3(255.0,135.0,0.0),
vec3(255.0,135.0,95.0),
vec3(255.0,135.0,135.0),
vec3(255.0,135.0,175.0),
vec3(255.0,135.0,215.0),
vec3(255.0,135.0,255.0),
vec3(255.0,175.0,0.0),
vec3(255.0,175.0,95.0),
vec3(255.0,175.0,135.0),
vec3(255.0,175.0,175.0),
vec3(255.0,175.0,215.0),
vec3(255.0,175.0,255.0),
vec3(255.0,215.0,0.0),
vec3(255.0,215.0,95.0),
vec3(255.0,215.0,135.0),
vec3(255.0,215.0,175.0),
vec3(255.0,215.0,215.0),
vec3(255.0,215.0,255.0),
vec3(255.0,255.0,0.0),
vec3(255.0,255.0,95.0),
vec3(255.0,255.0,135.0),
vec3(255.0,255.0,175.0),
vec3(255.0,255.0,215.0),
vec3(255.0,255.0,255.0),
vec3(8.0,8.0,8.0),
vec3(18.0,18.0,18.0),
vec3(28.0,28.0,28.0),
vec3(38.0,38.0,38.0),
vec3(48.0,48.0,48.0),
vec3(58.0,58.0,58.0),
vec3(68.0,68.0,68.0),
vec3(78.0,78.0,78.0),
vec3(88.0,88.0,88.0),
vec3(98.0,98.0,98.0),
vec3(108.0,108.0,108.0),
vec3(118.0,118.0,118.0),
vec3(128.0,128.0,128.0),
vec3(138.0,138.0,138.0),
vec3(148.0,148.0,148.0),
vec3(158.0,158.0,158.0),
vec3(168.0,168.0,168.0),
vec3(178.0,178.0,178.0),
vec3(188.0,188.0,188.0),
vec3(198.0,198.0,198.0),
vec3(208.0,208.0,208.0),
vec3(218.0,218.0,218.0),
vec3(228.0,228.0,228.0),
vec3(238.0,238.0,238.0)
);

int get_iterations()
{
    double real = ((gl_FragCoord.x / 1000.0f - 1.2f) * zoom + center_x) * 1.5f;
    double imag = ((gl_FragCoord.y / 800.0f - 0.7f) * zoom + center_y) * 1.5f;
 

    int iterations = 0;
    double const_real = real;
    double const_imag = imag;
 
    while (iterations < MAX_ITERATIONS)
    {
        double tmp_real = real;
        real = (real * real - imag * imag) + const_real;
        imag = (2.0 * tmp_real * imag) + const_imag;
         
        double dist = real * real + imag * imag;
 
        if (dist > 4.0)
            break;
 
        ++iterations;
    }
    return iterations;
}
 
 
vec4 return_color()
{
    int iter = get_iterations();
    if (iter == MAX_ITERATIONS)
    {
        gl_FragDepth = 0.0f;
        return vec4(0.0f, 0.0f, 0.0f, 1.0f);
    }
    int colorIndex = int((float(iter)/float(MAX_ITERATIONS))*256);
    vec3 color = colors[colorIndex];
    return vec4(color.x/256, color.y/256, color.z/256, 1.0);
    
}
 
void main()
{
    fragColor = return_color();
}

